From f5644254a41fd4c95f0d24a842b8c3ad446072be Mon Sep 17 00:00:00 2001
From: Matt Koenig <der_koenig@rocketmail.com>
Date: Mon, 10 Mar 2014 16:17:53 +0100
Subject: [PATCH] Add PLMN overriding

Change-Id: I1b272ac6182876917e3eba5c72324d75535a927e
---
 .../android/internal/telephony/OperatorInfo.java   | 30 +++++++
 .../android/internal/telephony/PlmnOverride.java   | 91 ++++++++++++++++++++++
 2 files changed, 121 insertions(+)
 create mode 100644 src/java/com/android/internal/telephony/PlmnOverride.java

diff --git a/src/java/com/android/internal/telephony/OperatorInfo.java b/src/java/com/android/internal/telephony/OperatorInfo.java
index d7d5143..59f5ea4 100644
--- a/src/java/com/android/internal/telephony/OperatorInfo.java
+++ b/src/java/com/android/internal/telephony/OperatorInfo.java
@@ -16,6 +16,8 @@
 
 package com.android.internal.telephony;
 
+import java.util.HashMap;
+
 import android.os.Parcel;
 import android.os.Parcelable;
 
@@ -30,6 +32,9 @@
         FORBIDDEN;
     }
 
+    private static HashMap<String, String[]> mPlmnEntries = 
+            new HashMap<String, String[]>();
+
     private String mOperatorAlphaLong;
     private String mOperatorAlphaShort;
     private String mOperatorNumeric;
@@ -79,6 +84,18 @@
 
         mOperatorAlphaLong = operatorAlphaLong;
         mOperatorAlphaShort = operatorAlphaShort;
+        if((mOperatorAlphaLong == null || mOperatorAlphaLong.equals("Unknown"))
+           && (mOperatorAlphaShort == null || mOperatorAlphaShort.equals("Unknown"))) {
+            String[] operatorNames = getOperatorNamesFromConfig(operatorNumeric);
+            if(operatorNames != null) {
+                mOperatorAlphaLong = operatorNames[0];
+                mOperatorAlphaShort = operatorNames[1];
+            }
+        }
+        if(mOperatorAlphaLong == null && mOperatorAlphaShort == null) {
+            mOperatorAlphaLong = operatorNumeric;
+            mOperatorAlphaShort = operatorNumeric;
+        }
         mOperatorNumeric = operatorNumeric;
         mOperatorRat = operatorRat;
         mState = state;
@@ -121,6 +138,19 @@ private static State rilStateToState(String s) {
         }
     }
 
+    public static String[] getOperatorNamesFromConfig(String numeric) {
+        if(mPlmnEntries.containsKey(numeric)) {
+            return mPlmnEntries.get(numeric);
+        } else {
+            PlmnOverride plmnOverride = new PlmnOverride();
+            String[] operatorNames = plmnOverride.getOperatorNames(numeric);
+            if(operatorNames != null) {
+                mPlmnEntries.put(numeric, operatorNames);
+            }
+            return operatorNames;
+        }
+    }
+
     @Override
     public String toString() {
         return "OperatorInfo " + mOperatorAlphaLong
diff --git a/src/java/com/android/internal/telephony/PlmnOverride.java b/src/java/com/android/internal/telephony/PlmnOverride.java
new file mode 100644
index 0000000..b3d5865
--- /dev/null
+++ b/src/java/com/android/internal/telephony/PlmnOverride.java
@@ -0,0 +1,91 @@
+/*
+ * Copyright (C) 2009 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.internal.telephony;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.IOException;
+import java.util.HashMap;
+
+import org.xmlpull.v1.XmlPullParser;
+import org.xmlpull.v1.XmlPullParserException;
+
+import android.os.Environment;
+import android.util.Log;
+import android.util.Xml;
+
+import com.android.internal.util.XmlUtils;
+
+public class PlmnOverride {
+    private HashMap<String, String[]> OperatorPlmnMap;
+
+
+    static final String LOG_TAG = "GSM";
+    static final String PARTNER_PLMN_OVERRIDE_PATH ="etc/plmn-conf.xml";
+
+    PlmnOverride () {
+        OperatorPlmnMap = new HashMap<String, String[]>();
+        loadPlmnOverrides();
+    }
+
+    public String[] getOperatorNames(String numeric) {
+        return OperatorPlmnMap.get(numeric);
+    }
+
+    private void loadPlmnOverrides() {
+        FileReader plmnReader;
+
+        final File plmnFile = new File(Environment.getRootDirectory(),
+                PARTNER_PLMN_OVERRIDE_PATH);
+
+        try {
+            plmnReader = new FileReader(plmnFile);
+        } catch (FileNotFoundException e) {
+            Log.w(LOG_TAG, "Can't open " +
+                    Environment.getRootDirectory() + "/" + PARTNER_PLMN_OVERRIDE_PATH);
+            return;
+        }
+
+        try {
+            XmlPullParser parser = Xml.newPullParser();
+            parser.setInput(plmnReader);
+
+            XmlUtils.beginDocument(parser, "operators");
+
+            while (true) {
+                XmlUtils.nextElement(parser);
+
+                String name = parser.getName();
+                if (!"operator".equals(name)) {
+                    break;
+                }
+
+                String numeric   = parser.getAttributeValue(null, "numeric");
+                String plmnShort = parser.getAttributeValue(null, "short");
+                String plmnLong  = parser.getAttributeValue(null, "long");
+
+                OperatorPlmnMap.put(numeric, new String[] { plmnLong, plmnShort });
+            }
+        } catch (XmlPullParserException e) {
+            Log.w(LOG_TAG, "Exception in plmn-conf parser " + e);
+        } catch (IOException e) {
+            Log.w(LOG_TAG, "Exception in plmn-conf parser " + e);
+        }
+    }
+
+}
